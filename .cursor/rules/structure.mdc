---
description: Prometheus-FE 프로젝트 구조 및 아키텍처 계층화 룰
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx"]
alwaysApply: false
---

# 🏗️ Prometheus-FE 프로젝트 구조 및 아키텍처 룰

## 📋 모노레포 구조

이 프로젝트는 Turborepo를 사용한 모노레포 구조로 구성되어 있습니다:

```
Prometheus-FE/
├── apps/
│   ├── web/                    # Next.js 15 웹 애플리케이션
│   │   ├── app/               # App Router 페이지 및 라우팅
│   │   └── src/components/    # 재사용 가능한 UI 컴포넌트
│   └── mobile/                # React Native 모바일 애플리케이션
└── packages/
    ├── types/                 # 🔧 Domain Types Layer (독립적)
    ├── api/                   # 📡 Data Access Layer
    │   └── src/dto/          # 📝 DTO Layer
    ├── hooks/                 # 🎣 Business Logic Layer
    ├── stores/                # 🏪 Global State Management
    ├── context/               # React Context Providers
    └── config/                # 공통 설정
```

## 🎯 핵심 아키텍처 원칙

### 1. 단방향 의존성 (Unidirectional Dependency)
```
Pages/Components → Hooks → API → DTOs
       ↓            ↓      ↓     ↓
    Types    ←   Types ← Types ← Types
```

### 2. 계층별 Import 제한

| Layer | 허용되는 Import | 금지되는 Import |
|-------|----------------|-----------------|
| **Pages/Components** | `@prometheus-fe/hooks`<br/>`@prometheus-fe/types`<br/>`@prometheus-fe/stores` | `@prometheus-fe/api`<br/>DTO 직접 import |
| **Hooks** | `@prometheus-fe/api`<br/>`@prometheus-fe/types`<br/>`@prometheus-fe/stores` | DTO 직접 import |
| **API** | `@prometheus-fe/types`<br/>DTO files | Hooks, Pages, Stores |
| **DTOs** | `@prometheus-fe/types` | API, Hooks, Pages, Stores |
| **Types** | 없음 (독립적) | 모든 다른 레이어 |

## 📝 코드 구성 규칙

### ✅ 올바른 구현
```typescript
// Pages/Components: Hook만 사용
import { useProject } from '@prometheus-fe/hooks';
import { Project } from '@prometheus-fe/types';

// Hooks: API를 통해서만 데이터 접근
import { useApi } from '@prometheus-fe/context';
const { project } = useApi();
const data = await project.list(params);

// API: DTO와 Domain Type 사용
import { CreateProjectRequest } from './dto/project.dto';
import { Project } from '@prometheus-fe/types';
```

### ❌ 잘못된 구현
```typescript
// 금지: Page에서 직접 API 사용
import { projectApi } from '@prometheus-fe/api'; // ❌

// 금지: Hook에서 직접 DTO import
import { CreateProjectRequest } from '@prometheus-fe/api/dto'; // ❌
```

## 🚀 개발 워크플로우

1. **Types 정의**: 도메인 타입 먼저 정의
2. **DTO 정의**: API 요청/응답 타입 정의  
3. **API 구현**: HTTP 통신 로직 구현
4. **Hook 구현**: 비즈니스 로직 구현
5. **UI 구현**: 컴포넌트 및 페이지 구현

---

*상세한 아키텍처 가이드는 `structureForPM.mdc`를 참고하세요.*
